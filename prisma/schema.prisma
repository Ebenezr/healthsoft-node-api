// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          Int      @id @default(autoincrement())
  firstName   String   @db.VarChar(255)
  lastName    String   @db.VarChar(255)
  phone       String
  email       String
  password    String
  gender      Gender
  designation String?
  role        Role     @default(ADMIN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String?  @default("https://api.realworld.io/images/smiley-cyrus.jpeg")

  @@unique([email])
  @@index([email])
  @@map(name: "admins")
}

model Nurse {
  id               Int          @id @default(autoincrement())
  firstName        String       @db.VarChar(255)
  lastName         String       @db.VarChar(255)
  phone            String
  email            String
  password         String
  gender           Gender
  designation      String?
  role             Role         @default(NURSE)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  Appointment      Appointment?
  verified         Boolean?     @default(false)
  verificationCode String?      @unique @db.Text
  image            String?      @default("https://api.realworld.io/images/smiley-cyrus.jpeg")

  @@unique([email, verificationCode])
  @@index([email, verificationCode])
  @@map(name: "nurses")
}

model Doctor {
  id               Int          @id @default(autoincrement())
  firstName        String       @db.VarChar(255)
  lastName         String       @db.VarChar(255)
  phone            String
  email            String
  password         String
  gender           Gender
  designation      String?
  role             Role         @default(DOCTOR)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  Appointment      Appointment?
  Checkup          Checkup?
  verified         Boolean?     @default(false)
  verificationCode String?      @unique @db.Text
  image            String?      @default("https://api.realworld.io/images/smiley-cyrus.jpeg")

  @@unique([email, verificationCode])
  @@index([email, verificationCode])
  @@map(name: "doctors")
}

model Patient {
  id            Int           @id @default(autoincrement())
  firstName     String        @db.VarChar(255)
  lastName      String        @db.VarChar(255)
  gender        Gender
  dob           String
  maritalStatus MaritalStatus
  nationalId    String
  phone         String
  email         String?
  address       String?       @db.VarChar(255)
  county        String?       @db.VarChar(255)
  estate        String?       @db.VarChar(255)
  Vitals        Vitals?
  Appointment   Appointment?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  Checkup       Checkup?

  @@index([email])
  @@map(name: "patients")
}

model Vitals {
  id          Int      @id @default(autoincrement())
  patient     Patient  @relation(fields: [patientID], references: [id], onDelete: Cascade)
  patientID   Int      @unique
  bpSystolic  Int
  bpDiastolic Int
  temperature Float
  notes       String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map(name: "vitals")
}

model Appointment {
  id              Int         @id @default(autoincrement())
  patientType     PatientType
  patient         Patient     @relation(fields: [patientID], references: [id], onDelete: Cascade)
  patientID       Int         @unique
  doctor          Doctor      @relation(fields: [doctorID], references: [id], onDelete: Cascade)
  doctorID        Int         @unique
  nurse           Nurse       @relation(fields: [nurseID], references: [id], onDelete: Cascade)
  nurseID         Int         @unique
  appointmentdate DateTime
  appointmentTime DateTime
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map(name: "appointments")
}

model Checkup {
  id           Int       @id @default(autoincrement())
  patient      Patient   @relation(fields: [patientID], references: [id], onDelete: Cascade)
  patientID    Int       @unique
  doctor       Doctor    @relation(fields: [doctorID], references: [id], onDelete: Cascade)
  doctorID     Int       @unique
  symptoms     String?   @db.VarChar(255)
  diagnosis    String?   @db.VarChar(255)
  advice       String?   @db.VarChar(255)
  comment      String?   @db.VarChar(255)
  HPI          String?   @db.VarChar(255)
  examinations String?   @db.VarChar(255)
  checkupDate  DateTime
  nextVisit    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map(name: "checkups")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PatientType {
  INPATIENT
  OUTPATIENT
}

enum Role {
  DOCTOR
  NURSE
  ADMIN
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}
